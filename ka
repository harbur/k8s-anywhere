#!/bin/bash

set -o pipefail

function print_usage {
    cat << EOF
ka is a utility for launching Kubernetes Anywhere

Usage: ka [command]

Available commands:
  up       Starts Kubernetes in the Docker host currently configured with your local docker command
  stop     Stops a previously started Kubernetes cluster keeping cluster info
  down     Tear down a previously started Kubernetes cluster deleting permanently cluster info
  restart  Restart Kubernetes
EOF
}

# Text color variables
txtund=$(tput sgr 0 1)          # Underline
txtbld=$(tput bold)             # Bold
bldred=${txtbld}$(tput setaf 1) #  red
bldblu=${txtbld}$(tput setaf 4) #  blue
bldyel=${txtbld}$(tput setaf 3) #  yellow
bldgre=${txtbld}$(tput setaf 2) #  green
bldwht=${txtbld}$(tput setaf 7) #  white
txtrst=$(tput sgr0)             # Reset

pass="${bldgre}[PASS]${txtrst}"
skip="${bldblu}[SKIP]${txtrst}"
warn="${bldyel}[WARN]${txtrst}"
fail="${bldred}[FAIL]${txtrst}"

check_docker_for_mac() {
  local -r docker_for_mac_version="${HOME}/Library/Containers/com.docker.docker/Data/database/com.docker.driver.amd64-linux/schema-version"
  [ "$(uname)" = "Darwin" ] \
    && [ -f "${docker_for_mac_version}" ]
}

check_docker_local() {
  [ -S /var/run/docker.sock ] \
    && docker --host="unix:///var/run/docker.sock" info &> /dev/null
  ## TODO: figure out if sudo is needed
}

socks::start() {
  echo -n "Starting SOCKS proxy...... "
  docker rm -f socks &> /dev/null || true
  docker run --net=weave --name socks -d -p 1080:1080 harbur/srelay:20150703-9461835 &> /dev/$output
  echo $pass
}

socks::stop() {
  echo -n "Stopping SOCKS proxy...... "
  docker rm -f socks &> /dev/null || true
  echo $pass
}

if check_docker_local && check_docker_for_mac ; then
  hostname="docker"
elif check_docker_local ; then
  hostname="$(hostname)"
else
  exit 1
fi

mode=$1
version="${2:-v1.2}"

# use DEBUG variable to activate output logs
if [ ! -z $DEBUG ]; then
  output=stdout;
else
  output=null;
fi

weave::start() {
  echo -n "Starting Weave Network.... "
  weave status &>/dev/$output
  if [ $? == 0 ]; then
    echo $skip
  else
    weave launch &>/dev/$output
    weave expose -h "${hostname}.weave.local" &> /dev/$output
    echo $pass
  fi
}

weave::stop() {
  echo -n "Stopping Weave Network.... "
  weave status &>/dev/$output
  if [ $? == 1 ]; then
    echo $skip
  else
    weave stop
    echo $pass
  fi
}

docker::config() {
  if ! check_docker_for_mac ; then
   eval "$(weave env)"
  fi
}

kubernetes::start() {
  echo -n "Starting Kubernetes....... "
  docker run \
  --volume="/:/rootfs" \
  --volume="/var/run/weave/weave.sock:/docker.sock" \
    "weaveworks/kubernetes-anywhere:toolbox-${version}" \
      setup-single-node &> /dev/$output
  docker run \
    --volume="/var/run/weave/weave.sock:/docker.sock" \
      "weaveworks/kubernetes-anywhere:toolbox-${version}" \
        compose -p kube up -d &> /dev/$output
  echo $pass
}

kubernetes::stop() {
  echo -n "Stopping Kubernetes....... "
  docker run \
  --volume="/:/rootfs" \
  --volume="/var/run/docker.sock:/docker.sock" \
    "weaveworks/kubernetes-anywhere:toolbox-${version}" \
      compose -p kube down &> /dev/$output || true
  echo $pass
}

kubernetes::reset() {
  echo -n "Reseting Kubernetes....... "
  docker run \
  --volume="/:/rootfs" \
  --volume="/var/run/docker.sock:/docker.sock" \
    "weaveworks/kubernetes-anywhere:toolbox-${version}" \
      reset-single-node &> /dev/$output
  echo $pass
}

kubernetes::addons() {
  echo -n "Setup Kubernetes Addons... "
  docker run --net=weave --dns=172.17.0.1 \
    --volumes-from=kube-toolbox-pki weaveworks/kubernetes-anywhere:toolbox-${version} \
    kubectl create -f addons-v1.2.yaml &> /dev/$output || true
  echo $pass
}

kubernetes::config() {
  echo -n "Configure Kube client..... "
  kubectl config set-cluster local-cluster --server=http://localhost:8080 &> /dev/$output
  kubectl config set-context kubernetes-anywhere --cluster=local-cluster &> /dev/$output
  kubectl config use-context kubernetes-anywhere &> /dev/$output
  echo $pass
}

case "$mode" in
  up)
    weave::start
    docker::config
    kubernetes::start
    kubernetes::addons
    socks::start
    kubernetes::config
  ;;
  start)
    weave::start
    docker::config
    kubernetes::start
    socks::start
    kubernetes::config
  ;;
  reset)
    kubernetes::stop
    kubernetes::reset
  ;;
  down)
    kubernetes::stop
    weave::stop
    socks::stop
  ;;
  stop)
    kubernetes::stop
    socks::stop
  ;;
  # Exposing Functions
  weave::start)
    weave::start
  ;;
  weave::stop)
    weave::stop
  ;;
  kubernetes::start)
    kubernetes::start
  ;;
  kubernetes::stop)
    kubernetes::stop
  ;;
  kubernetes::reset)
    kubernetes::reset
  ;;
  socks::start)
    socks::start
  ;;
  socks::stop)
    socks::stop
  ;;
  *)
    print_usage
  ;;
esac
